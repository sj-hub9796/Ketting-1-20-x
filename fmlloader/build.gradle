import net.minecraftforge.gradleutils.PomUtils

plugins {
    id 'java-library'
    id 'maven-publish'
//    id 'org.cadixdev.licenser' //Ketting - we integrate other stuff, that is not applicable with the licensing used here
    id 'net.minecraftforge.gradleutils'
}

apply from: rootProject.file('build_shared.gradle')

configurations.forEach{ it.transitive = false }

dependencies {
    compileOnly(libs.nulls)

    api(libs.bundles.asm) // Needed by all the black magic
    api(libs.forgespi)
    api(libs.mergetool.api)
    api(libs.log4j.api)
    api(libs.slf4j.api)
    api(libs.guava)
    api(libs.gson)
    api(libs.maven.artifact)
    api(libs.apache.commons)
    api(libs.bundles.night.config)
    api(libs.modlauncher)
    api(libs.coremods)
    api(libs.mojang.logging)
    api(libs.jarjar.selector)
    api(libs.jarjar.meta)

    implementation(libs.jopt.simple)
    implementation(libs.securejarhandler)
    implementation(libs.accesstransformers)
    implementation(libs.jimfs)

    implementation(libs.log4j.core)
    annotationProcessor(libs.log4j.core)

    testCompileOnly(libs.nulls)
    testRuntimeOnly(libs.bootstrap)

    implementation libs.kettingcommon
    implementation(libs.terminalcolors)
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(JAVA_VERSION)
    withSourcesJar()
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
            'Automatic-Module-Name': 'net.minecraftforge.fmlloader',
            'Forge-Module-Layer':    'boot'
        ] as LinkedHashMap)
        attributes([
            'Specification-Title':   'FMLLoader',
            'Specification-Vendor':  'Forge Development LLC',
            'Specification-Version': '1',
            'Implementation-Title':  'FMLLoader',
            'Implementation-Vendor': 'Forge Development LLC',
            'Implementation-Version': FORGE_VERSION
        ] as LinkedHashMap, 'net/minecraftforge/fml/loading/')
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs << '-Xlint:-unchecked'
}
//Ketting start - we integrate other stuff, that is not applicable with the licensing used here
/*
license {
    header = rootProject.file('LICENSE-header.txt')
}
*/
//Ketting end
publishing {
    publications.register('mavenJava', MavenPublication).configure {
        from components.java
        artifactId = 'fmlloader'
        pom {
            name = project.name
            description = 'Modifactions to Minecraft to enable mod developers.'
            url = "https://github.com/kettingpowered/Ketting-1-20-x"
            developers {
                developer {
                    id = "justred23"
                    name = "JustRed23"
                }
                developer {
                    id = "c0d3m4513r"
                    name = "C0D3 M4513R"
                }
            }
            scm {
                connection = "scm:git:https://github.com/kettingpowered/Ketting-1-20-x.git"
                //developerConnection = "scm:svn:https://subversion.example.com/svn/project/trunk/"
                url = "https://github.com/kettingpowered/Ketting-1-20-x"
            }
            PomUtils.setGitHubDetails(pom, 'kettingpowered', 'Ketting-1-20-x')
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/kettingpowered/Ketting-1-20-x")
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
        maven {
            name = 'kettingRepo'
            credentials {
                username = System.getenv("KETTINGUSERNAME")
                password = System.getenv("KETTINGPASSWORD")
            }
            url = "https://reposilite.c0d3m4513r.com/Ketting-Server-Releases/"
        }
    }
}

tasks.register('writeForgeVersionJson') {
    doLast {
        file('src/main/resources/forge_version.json').json = [
            'forge': FORGE_VERSION,
            'mc': MC_VERSION,
            'mcp': MCP_VERSION
        ] as LinkedHashMap
    }
}

tasks.named('generateResources').configure {
    dependsOn('writeForgeVersionJson')
}
