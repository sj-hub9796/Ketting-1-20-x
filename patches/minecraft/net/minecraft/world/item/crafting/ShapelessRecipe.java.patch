--- a/net/minecraft/world/item/crafting/ShapelessRecipe.java
+++ b/net/minecraft/world/item/crafting/ShapelessRecipe.java
@@ -20,6 +_,7 @@
    final CraftingBookCategory category;
    final ItemStack result;
    final NonNullList<Ingredient> ingredients;
+   private final boolean isSimple;
 
    public ShapelessRecipe(ResourceLocation p_251840_, String p_249640_, CraftingBookCategory p_249390_, ItemStack p_252071_, NonNullList<Ingredient> p_250689_) {
       this.id = p_251840_;
@@ -27,7 +_,29 @@
       this.category = p_249390_;
       this.result = p_252071_;
       this.ingredients = p_250689_;
-   }
+      this.isSimple = p_250689_.stream().allMatch(Ingredient::isSimple);
+   }
+
+   // CraftBukkit start
+   @SuppressWarnings("unchecked")
+   @Override
+   public org.bukkit.inventory.Recipe toBukkitRecipe() { //Ketting - org.bukkit.inventory.ShapelessRecipe -> org.bukkit.inventory.Recipe
+      //Ketting start - empty check
+      if (this.result.isEmpty())
+         return new org.kettingpowered.ketting.craftbukkit.CraftModdedRecipe(this);
+      //Ketting end
+
+      org.bukkit.craftbukkit.v1_20_R1.inventory.CraftItemStack result = org.bukkit.craftbukkit.v1_20_R1.inventory.CraftItemStack.asCraftMirror(this.result);
+      org.bukkit.craftbukkit.v1_20_R1.inventory.CraftShapelessRecipe recipe = new org.bukkit.craftbukkit.v1_20_R1.inventory.CraftShapelessRecipe(org.bukkit.craftbukkit.v1_20_R1.util.CraftNamespacedKey.fromMinecraft(this.id), result);
+      recipe.setGroup(this.group);
+      recipe.setCategory(org.bukkit.craftbukkit.v1_20_R1.inventory.CraftRecipe.getCategory(this.category()));
+
+      for (Ingredient list : this.ingredients) {
+         recipe.addIngredient(org.bukkit.craftbukkit.v1_20_R1.inventory.CraftRecipe.toBukkit(list));
+      }
+      return recipe;
+   }
+   // CraftBukkit end
 
    public ResourceLocation getId() {
       return this.id;
@@ -55,17 +_,20 @@
 
    public boolean matches(CraftingContainer p_44262_, Level p_44263_) {
       StackedContents stackedcontents = new StackedContents();
+      java.util.List<ItemStack> inputs = new java.util.ArrayList<>();
       int i = 0;
 
       for(int j = 0; j < p_44262_.getContainerSize(); ++j) {
          ItemStack itemstack = p_44262_.getItem(j);
          if (!itemstack.isEmpty()) {
             ++i;
+            if (isSimple)
             stackedcontents.accountStack(itemstack, 1);
+            else inputs.add(itemstack);
          }
       }
 
-      return i == this.ingredients.size() && stackedcontents.canCraft(this, (IntList)null);
+      return i == this.ingredients.size() && (isSimple ? stackedcontents.canCraft(this, (IntList)null) : net.minecraftforge.common.util.RecipeMatcher.findMatches(inputs,  this.ingredients) != null);
    }
 
    public ItemStack assemble(CraftingContainer p_44260_, RegistryAccess p_266797_) {
@@ -77,14 +_,15 @@
    }
 
    public static class Serializer implements RecipeSerializer<ShapelessRecipe> {
+      private static final ResourceLocation NAME = new ResourceLocation("minecraft", "crafting_shapeless");
       public ShapelessRecipe fromJson(ResourceLocation p_44290_, JsonObject p_44291_) {
          String s = GsonHelper.getAsString(p_44291_, "group", "");
          CraftingBookCategory craftingbookcategory = CraftingBookCategory.CODEC.byName(GsonHelper.getAsString(p_44291_, "category", (String)null), CraftingBookCategory.MISC);
          NonNullList<Ingredient> nonnulllist = itemsFromJson(GsonHelper.getAsJsonArray(p_44291_, "ingredients"));
          if (nonnulllist.isEmpty()) {
             throw new JsonParseException("No ingredients for shapeless recipe");
-         } else if (nonnulllist.size() > 9) {
-            throw new JsonParseException("Too many ingredients for shapeless recipe");
+         } else if (nonnulllist.size() > ShapedRecipe.MAX_WIDTH * ShapedRecipe.MAX_HEIGHT) {
+            throw new JsonParseException("Too many ingredients for shapeless recipe. The maximum is " + (ShapedRecipe.MAX_WIDTH * ShapedRecipe.MAX_HEIGHT));
          } else {
             ItemStack itemstack = ShapedRecipe.itemStackFromJson(GsonHelper.getAsJsonObject(p_44291_, "result"));
             return new ShapelessRecipe(p_44290_, s, craftingbookcategory, itemstack, nonnulllist);
@@ -96,7 +_,7 @@
 
          for(int i = 0; i < p_44276_.size(); ++i) {
             Ingredient ingredient = Ingredient.fromJson(p_44276_.get(i), false);
-            if (!ingredient.isEmpty()) {
+            if (true || !ingredient.isEmpty()) { // FORGE: Skip checking if an ingredient is empty during shapeless recipe deserialization to prevent complex ingredients from caching tags too early. Can not be done using a config value due to sync issues.
                nonnulllist.add(ingredient);
             }
          }
