--- a/net/minecraft/world/item/crafting/RecipeManager.java
+++ b/net/minecraft/world/item/crafting/RecipeManager.java
@@ -11,7 +_,6 @@
 import com.mojang.datafixers.util.Pair;
 import com.mojang.logging.LogUtils;
 import java.util.Collection;
-import java.util.Collections;
 import java.util.Comparator;
 import java.util.List;
 import java.util.Map;
@@ -37,9 +_,17 @@
    public Map<RecipeType<?>, Map<ResourceLocation, Recipe<?>>> recipes = ImmutableMap.of();
    private Map<ResourceLocation, Recipe<?>> byName = ImmutableMap.of();
    private boolean hasErrors;
+   private final net.minecraftforge.common.crafting.conditions.ICondition.IContext context; //Forge: add context
 
+   /** @deprecated Forge: use {@linkplain RecipeManager#RecipeManager(net.minecraftforge.common.crafting.conditions.ICondition.IContext) constructor with context}. */
+   @Deprecated
    public RecipeManager() {
+      this(net.minecraftforge.common.crafting.conditions.ICondition.IContext.EMPTY);
+   }
+
+   public RecipeManager(net.minecraftforge.common.crafting.conditions.ICondition.IContext context) {
       super(GSON, "recipes");
+      this.context = context;
    }
 
    protected void apply(Map<ResourceLocation, JsonElement> p_44037_, ResourceManager p_44038_, ProfilerFiller p_44039_) {
@@ -49,12 +_,21 @@
 
       for(Map.Entry<ResourceLocation, JsonElement> entry : p_44037_.entrySet()) {
          ResourceLocation resourcelocation = entry.getKey();
+         if (resourcelocation.getPath().startsWith("_")) continue; //Forge: filter anything beginning with "_" as it's used for metadata.
 
          try {
-            Recipe<?> recipe = fromJson(resourcelocation, GsonHelper.convertToJsonObject(entry.getValue(), "top element"));
-            map.computeIfAbsent(recipe.getType(), (p_44075_) -> {
+            if (entry.getValue().isJsonObject() && !net.minecraftforge.common.crafting.CraftingHelper.processConditions(entry.getValue().getAsJsonObject(), "conditions", this.context)) {
+               LOGGER.debug("Skipping loading recipe {} as it's conditions were not met", resourcelocation);
+               continue;
+            }
+            Recipe<?> recipe = fromJson(resourcelocation, GsonHelper.convertToJsonObject(entry.getValue(), "top element"), this.context);
+            if (recipe == null) {
+               LOGGER.info("Skipping loading recipe {} as it's serializer returned null", resourcelocation);
+               continue;
+            }
+            (map.computeIfAbsent(recipe.getType(), (recipes) -> {
                return ImmutableMap.builder();
-            }).put(resourcelocation, recipe);
+            })).put(resourcelocation, recipe);
             builder.put(resourcelocation, recipe);
          } catch (IllegalArgumentException | JsonParseException jsonparseexception) {
             LOGGER.error("Parsing error loading recipe {}", resourcelocation, jsonparseexception);
@@ -64,18 +_,46 @@
       this.recipes = map.entrySet().stream().collect(ImmutableMap.toImmutableMap(Map.Entry::getKey, (p_44033_) -> {
          return p_44033_.getValue().build();
       }));
-      this.byName = builder.build();
+      this.byName = Maps.newHashMap(builder.build()); // CraftBukkit
       LOGGER.info("Loaded {} recipes", (int)map.size());
    }
 
+   // CraftBukkit start
+   public void addRecipe(Recipe<?> irecipe) {
+      org.spigotmc.AsyncCatcher.catchOp("Recipe Add"); // Spigot
+      it.unimi.dsi.fastutil.objects.Object2ObjectLinkedOpenHashMap<ResourceLocation, Recipe<?>> map = new it.unimi.dsi.fastutil.objects.Object2ObjectLinkedOpenHashMap<>(this.recipes.get(irecipe.getType())); //Ketting - type
+
+      if (byName.containsKey(irecipe.getId()) || map.containsKey(irecipe.getId())) {
+         throw new IllegalStateException("Duplicate recipe ignored with ID " + irecipe.getId());
+      } else {
+         map.putAndMoveToFirst(irecipe.getId(), irecipe);
+
+         //Ketting start
+         //copy recipes to new map that is mutable
+         Map<RecipeType<?>, Map<ResourceLocation, Recipe<?>>> newRecipes = Maps.newHashMap(this.recipes);
+         newRecipes.put(irecipe.getType(), ImmutableMap.copyOf(map));
+
+         //make the new map immutable
+         this.recipes = ImmutableMap.copyOf(newRecipes);
+         //Ketting end
+
+         byName.put(irecipe.getId(), irecipe);
+      }
+   }
+   // CraftBukkit end
+
    public boolean hadErrorsLoading() {
       return this.hasErrors;
    }
 
    public <C extends Container, T extends Recipe<C>> Optional<T> getRecipeFor(RecipeType<T> p_44016_, C p_44017_, Level p_44018_) {
-      return this.byType(p_44016_).values().stream().filter((p_220266_) -> {
-         return p_220266_.matches(p_44017_, p_44018_);
+      // CraftBukkit start
+      Optional<T> recipe = this.byType(p_44016_).values().stream().filter((p_296918_) -> {
+         return p_296918_.matches(p_44017_, p_44018_);
       }).findFirst();
+      p_44017_.setCurrentRecipe(recipe.orElse(null)); // CraftBukkit - Clear recipe when no recipe is found
+      return recipe;
+      // CraftBukkit end
    }
 
    public <C extends Container, T extends Recipe<C>> Optional<Pair<ResourceLocation, T>> getRecipeFor(RecipeType<T> p_220249_, C p_220250_, Level p_220251_, @Nullable ResourceLocation p_220252_) {
@@ -107,7 +_,7 @@
    }
 
    private <C extends Container, T extends Recipe<C>> Map<ResourceLocation, T> byType(RecipeType<T> p_44055_) {
-      return (Map<ResourceLocation, T>)this.recipes.getOrDefault(p_44055_, Collections.emptyMap());
+      return (Map) this.recipes.getOrDefault(p_44055_, new it.unimi.dsi.fastutil.objects.Object2ObjectLinkedOpenHashMap<>()); // CraftBukkit
    }
 
    public <C extends Container, T extends Recipe<C>> NonNullList<ItemStack> getRemainingItemsFor(RecipeType<T> p_44070_, C p_44071_, Level p_44072_) {
@@ -141,11 +_,17 @@
       });
    }
 
+   /** @deprecated Forge: use {@linkplain #fromJson(ResourceLocation, JsonObject, net.minecraftforge.common.crafting.conditions.ICondition.IContext) overload with context}. */
+   @Deprecated
    public static Recipe<?> fromJson(ResourceLocation p_44046_, JsonObject p_44047_) {
+      return fromJson(p_44046_, p_44047_, net.minecraftforge.common.crafting.conditions.ICondition.IContext.EMPTY);
+   }
+
+   public static Recipe<?> fromJson(ResourceLocation p_44046_, JsonObject p_44047_, net.minecraftforge.common.crafting.conditions.ICondition.IContext context) {
       String s = GsonHelper.getAsString(p_44047_, "type");
       return BuiltInRegistries.RECIPE_SERIALIZER.getOptional(new ResourceLocation(s)).orElseThrow(() -> {
          return new JsonSyntaxException("Invalid or unsupported recipe type '" + s + "'");
-      }).fromJson(p_44046_, p_44047_);
+      }).fromJson(p_44046_, p_44047_, context);
    }
 
    public void replaceRecipes(Iterable<Recipe<?>> p_44025_) {
@@ -164,8 +_,40 @@
          }
       });
       this.recipes = ImmutableMap.copyOf(map);
-      this.byName = builder.build();
-   }
+      this.byName = Maps.newHashMap(builder.build()); // CraftBukkit
+   }
+
+   // CraftBukkit start
+   public boolean removeRecipe(ResourceLocation resourceLocation) {
+      //Ketting start - gotta love mutable maps
+      /*
+      for (Map<ResourceLocation, Recipe<?>> recipes : recipes.values()) {
+         recipes.remove(resourceLocation);
+      }
+      */
+      Map<RecipeType<?>, Map<ResourceLocation, Recipe<?>>> mutableRecipes = Maps.newHashMap(this.recipes);
+      for (Map.Entry<RecipeType<?>, Map<ResourceLocation, Recipe<?>>> recipes : this.recipes.entrySet()) {
+         Map<ResourceLocation, Recipe<?>> recipeList = Maps.newHashMap(recipes.getValue());
+         recipeList.remove(resourceLocation);
+         mutableRecipes.put(recipes.getKey(), ImmutableMap.copyOf(recipeList));
+      }
+      this.recipes = ImmutableMap.copyOf(mutableRecipes);
+      //Ketting end
+
+      return byName.remove(resourceLocation) != null;
+   }
+
+   public void clearRecipes() {
+      this.recipes = Maps.newHashMap();
+
+      for (RecipeType<?> recipeType : BuiltInRegistries.RECIPE_TYPE) {
+         this.recipes.put(recipeType, ImmutableMap.of()); //Ketting - type
+      }
+      this.recipes = ImmutableMap.copyOf(this.recipes); //Ketting
+
+      this.byName = Maps.newHashMap();
+   }
+   // CraftBukkit end
 
    public static <C extends Container, T extends Recipe<C>> RecipeManager.CachedCheck<C, T> createCheck(final RecipeType<T> p_220268_) {
       return new RecipeManager.CachedCheck<C, T>() {
