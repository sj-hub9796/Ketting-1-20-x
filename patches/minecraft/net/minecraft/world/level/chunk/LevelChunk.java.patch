--- a/net/minecraft/world/level/chunk/LevelChunk.java
+++ b/net/minecraft/world/level/chunk/LevelChunk.java
@@ -47,7 +_,7 @@
 import net.minecraft.world.ticks.TickContainerAccess;
 import org.slf4j.Logger;
 
-public class LevelChunk extends ChunkAccess {
+public class LevelChunk extends ChunkAccess implements net.minecraftforge.common.capabilities.ICapabilityProviderImpl<LevelChunk> {
    static final Logger LOGGER = LogUtils.getLogger();
    private static final TickingBlockEntity NULL_TICKER = new TickingBlockEntity() {
       public void tick() {
@@ -68,6 +_,7 @@
    private final Map<BlockPos, LevelChunk.RebindableTickingBlockEntityWrapper> tickersInLevel = Maps.newHashMap();
    private boolean loaded;
    public final Level level;
+   public final ServerLevel levelCB; //Ketting
    @Nullable
    private Supplier<FullChunkStatus> fullStatus;
    @Nullable
@@ -83,6 +_,15 @@
    public LevelChunk(Level p_196854_, ChunkPos p_196855_, UpgradeData p_196856_, LevelChunkTicks<Block> p_196857_, LevelChunkTicks<Fluid> p_196858_, long p_196859_, @Nullable LevelChunkSection[] p_196860_, @Nullable LevelChunk.PostLoadProcessor p_196861_, @Nullable BlendingData p_196862_) {
       super(p_196855_, p_196856_, p_196854_, p_196854_.registryAccess().registryOrThrow(Registries.BIOME), p_196859_, p_196860_, p_196862_);
       this.level = p_196854_;
+
+      //Ketting start - craftbukkit
+      ServerLevel levelCB = null;
+      try {
+         levelCB = (ServerLevel) level;
+      } catch (ClassCastException ignored) {}
+      this.levelCB = levelCB;
+      //Ketting end
+
       this.gameEventListenerRegistrySections = new Int2ObjectOpenHashMap<>();
 
       for(Heightmap.Types heightmap$types : Heightmap.Types.values()) {
@@ -94,7 +_,13 @@
       this.postLoad = p_196861_;
       this.blockTicks = p_196857_;
       this.fluidTicks = p_196858_;
+      this.capProvider.initInternal();
    }
+
+   // CraftBukkit start
+   public boolean mustNotSave;
+   public boolean needsDecoration;
+   // CraftBukkit end
 
    public LevelChunk(ServerLevel p_196850_, ProtoChunk p_196851_, @Nullable LevelChunk.PostLoadProcessor p_196852_) {
       this(p_196850_, p_196851_.getPos(), p_196851_.getUpgradeData(), p_196851_.unpackBlockTicks(), p_196851_.unpackFluidTicks(), p_196851_.getInhabitedTime(), p_196851_.getSections(), p_196852_, p_196851_.getBlendingData());
@@ -121,6 +_,10 @@
       this.skyLightSources = p_196851_.skyLightSources;
       this.setLightCorrect(p_196851_.isLightCorrect());
       this.unsaved = true;
+      this.needsDecoration = true; // CraftBukkit
+      // CraftBukkit start
+      this.persistentDataContainer = p_196851_.persistentDataContainer; // SPIGOT-6814: copy PDC to account for 1.17 to 1.18 chunk upgrading.
+      // CraftBukkit end
    }
 
    public TickContainerAccess<Block> getBlockTicks() {
@@ -208,7 +_,19 @@
       }
    }
 
-   @Nullable
+   // CraftBukkit start
+   //Ketting start - reverse delegation
+   public final java.util.concurrent.atomic.AtomicBoolean ketting$setBlockState$doPlace = new java.util.concurrent.atomic.AtomicBoolean(true);
+   
+   @Nullable
+   public BlockState setBlockState(BlockPos p_62865_, BlockState p_62866_, boolean p_62867_, boolean doPlace) {
+      ketting$setBlockState$doPlace.set(doPlace);
+      return setBlockState(p_62865_, p_62866_, p_62867_);
+   }
+   //Ketting end
+   // CraftBukkit end
+   @Nullable
+   @Override
    public BlockState setBlockState(BlockPos p_62865_, BlockState p_62866_, boolean p_62867_) {
       int i = p_62865_.getY();
       LevelChunkSection levelchunksection = this.getSection(this.getSectionIndex(i));
@@ -245,14 +_,16 @@
             boolean flag2 = blockstate.hasBlockEntity();
             if (!this.level.isClientSide) {
                blockstate.onRemove(this.level, p_62865_, p_62866_, p_62867_);
-            } else if (!blockstate.is(block) && flag2) {
+         } else if ((!blockstate.is(block) || !p_62866_.hasBlockEntity()) && flag2) {
                this.removeBlockEntity(p_62865_);
             }
 
             if (!levelchunksection.getBlockState(j, k, l).is(block)) {
                return null;
             } else {
-               if (!this.level.isClientSide) {
+               // CraftBukkit - Don't place while processing the BlockPlaceEvent, unless it's a BlockContainer. Prevents blocks such as TNT from activating when cancelled.
+               //Ketting - combine forge and bukkit snapshot capture. Also query doPlace first, so it always gets reset
+               if (ketting$setBlockState$doPlace.getAndSet(true) && !this.level.isClientSide && (!this.level.captureBlockSnapshots || (!this.level.captureBlockStates || block instanceof net.minecraft.world.level.block.BaseEntityBlock))) {
                   p_62866_.onPlace(this.level, p_62865_, blockstate, p_62867_);
                }
 
@@ -294,7 +_,17 @@
 
    @Nullable
    public BlockEntity getBlockEntity(BlockPos p_62868_, LevelChunk.EntityCreationType p_62869_) {
-      BlockEntity blockentity = this.blockEntities.get(p_62868_);
+      // CraftBukkit start
+      BlockEntity blockentity = level.capturedTileEntities.get(p_62868_);
+      if (blockentity == null) {
+         blockentity = (BlockEntity) this.blockEntities.get(p_62868_);
+      }
+      // CraftBukkit end
+
+      if (blockentity != null && blockentity.isRemoved()) {
+         blockEntities.remove(p_62868_);
+         blockentity = null;
+      }
       if (blockentity == null) {
          CompoundTag compoundtag = this.pendingBlockEntities.remove(p_62868_);
          if (compoundtag != null) {
@@ -312,9 +_,6 @@
                this.addAndRegisterBlockEntity(blockentity);
             }
          }
-      } else if (blockentity.isRemoved()) {
-         this.blockEntities.remove(p_62868_);
-         return null;
       }
 
       return blockentity;
@@ -330,6 +_,7 @@
          }
 
          this.updateBlockEntityTicker(p_156391_);
+         p_156391_.onLoad();
       }
 
    }
@@ -362,6 +_,19 @@
             blockentity.setRemoved();
          }
 
+         // CraftBukkit start
+      } else {
+         System.out.println("Attempted to place a tile entity (" + p_156374_ + ") at " + p_156374_.getBlockPos().getX() + "," + p_156374_.getBlockPos().getY() + "," + p_156374_.getBlockPos().getZ()
+                 + " (" + getBlockState(blockpos) + ") where there was no entity tile!");
+         System.out.println("Chunk coordinates: " + (this.chunkPos.x * 16) + "," + (this.chunkPos.z * 16));
+         //Ketting start
+         //new Exception().printStackTrace();
+         Exception exception = new Exception();
+         org.kettingpowered.ketting.common.deobf.StacktraceDeobfuscator.deobf(exception);
+         exception.printStackTrace();
+         //Ketting end
+
+         // CraftBukkit end
       }
    }
 
@@ -369,9 +_,14 @@
    public CompoundTag getBlockEntityNbtForSaving(BlockPos p_62932_) {
       BlockEntity blockentity = this.getBlockEntity(p_62932_);
       if (blockentity != null && !blockentity.isRemoved()) {
+         try {
          CompoundTag compoundtag1 = blockentity.saveWithFullMetadata();
          compoundtag1.putBoolean("keepPacked", false);
          return compoundtag1;
+         } catch (Exception e) {
+            LOGGER.error("A BlockEntity type {} has thrown an exception trying to write state. It will not persist, Report this to the mod author", blockentity.getClass().getName(), e);
+            return null;
+         }
       } else {
          CompoundTag compoundtag = this.pendingBlockEntities.get(p_62932_);
          if (compoundtag != null) {
@@ -386,6 +_,13 @@
    public void removeBlockEntity(BlockPos p_62919_) {
       if (this.isInLevel()) {
          BlockEntity blockentity = this.blockEntities.remove(p_62919_);
+
+         // CraftBukkit start - SPIGOT-5561: Also remove from pending map
+         if (!pendingBlockEntities.isEmpty()) {
+            pendingBlockEntities.remove(p_62919_);
+         }
+         // CraftBukkit end
+
          if (blockentity != null) {
             Level level = this.level;
             if (level instanceof ServerLevel) {
@@ -433,6 +_,57 @@
 
    }
 
+   // CraftBukkit start
+   public void loadCallback() {
+      org.bukkit.Server server = this.level.getCraftServer();
+      if (server != null) {
+         /*
+          * If it's a new world, the first few chunks are generated inside
+          * the World constructor. We can't reliably alter that, so we have
+          * no way of creating a CraftWorld/CraftServer at that point.
+          */
+         org.bukkit.Chunk bukkitChunk = new org.bukkit.craftbukkit.v1_20_R1.CraftChunk(this);
+         server.getPluginManager().callEvent(new org.bukkit.event.world.ChunkLoadEvent(bukkitChunk, this.needsDecoration));
+
+         if (this.needsDecoration) {
+            this.needsDecoration = false;
+            java.util.Random random = new java.util.Random();
+            random.setSeed(levelCB.getSeed());
+            long xRand = random.nextLong() / 2L * 2L + 1L;
+            long zRand = random.nextLong() / 2L * 2L + 1L;
+            random.setSeed((long) this.chunkPos.x * xRand + (long) this.chunkPos.z * zRand ^ levelCB.getSeed());
+
+            org.bukkit.World world = this.level.getWorld();
+            if (world != null) {
+               this.level.populating = true;
+               try {
+                  for (org.bukkit.generator.BlockPopulator populator : world.getPopulators()) {
+                     populator.populate(world, random, bukkitChunk);
+                  }
+               } finally {
+                  this.level.populating = false;
+               }
+            }
+            server.getPluginManager().callEvent(new org.bukkit.event.world.ChunkPopulateEvent(bukkitChunk));
+         }
+      }
+   }
+
+   public void unloadCallback() {
+      org.bukkit.Server server = this.level.getCraftServer();
+      org.bukkit.Chunk bukkitChunk = new org.bukkit.craftbukkit.v1_20_R1.CraftChunk(this);
+      org.bukkit.event.world.ChunkUnloadEvent unloadEvent = new org.bukkit.event.world.ChunkUnloadEvent(bukkitChunk, this.isUnsaved());
+      server.getPluginManager().callEvent(unloadEvent);
+      // note: saving can be prevented, but not forced if no saving is actually required
+      this.mustNotSave = !unloadEvent.isSaveChunk();
+   }
+
+   @Override
+   public boolean isUnsaved() {
+      return super.isUnsaved() && !this.mustNotSave;
+   }
+   // CraftBukkit end
+
    public boolean isEmpty() {
       return false;
    }
@@ -455,7 +_,7 @@
       p_187974_.accept((p_187968_, p_187969_, p_187970_) -> {
          BlockEntity blockentity = this.getBlockEntity(p_187968_, LevelChunk.EntityCreationType.IMMEDIATE);
          if (blockentity != null && p_187970_ != null && blockentity.getType() == p_187969_) {
-            blockentity.load(p_187970_);
+            blockentity.handleUpdateTag(p_187970_);
          }
 
       });
@@ -564,6 +_,7 @@
    }
 
    public void clearAllBlockEntities() {
+      this.blockEntities.values().forEach(BlockEntity::onChunkUnloaded);
       this.blockEntities.values().forEach(BlockEntity::setRemoved);
       this.blockEntities.clear();
       this.tickersInLevel.values().forEach((p_187966_) -> {
@@ -573,6 +_,7 @@
    }
 
    public void registerAllBlockEntitiesAfterLevelLoad() {
+      this.level.addFreshBlockEntities(this.blockEntities.values());
       this.blockEntities.values().forEach((p_187988_) -> {
          Level level = this.level;
          if (level instanceof ServerLevel serverlevel) {
@@ -621,6 +_,41 @@
       return new LevelChunk.BoundTickingBlockEntity<>(p_156376_, p_156377_);
    }
 
+   // FORGE START
+   private final net.minecraftforge.common.capabilities.CapabilityProvider.AsField<LevelChunk> capProvider = new net.minecraftforge.common.capabilities.CapabilityProvider.AsField<>(LevelChunk.class, this);
+
+   @org.jetbrains.annotations.NotNull
+   @Override
+   public <T> net.minecraftforge.common.util.LazyOptional<T> getCapability(@org.jetbrains.annotations.NotNull net.minecraftforge.common.capabilities.Capability<T> cap, @org.jetbrains.annotations.Nullable net.minecraft.core.Direction side)
+   {
+      return capProvider.getCapability(cap, side);
+   }
+
+   @Override
+   public boolean areCapsCompatible(net.minecraftforge.common.capabilities.CapabilityProvider<LevelChunk> other)
+   {
+      return capProvider.areCapsCompatible(other);
+   }
+
+   @Override
+   public boolean areCapsCompatible(@org.jetbrains.annotations.Nullable net.minecraftforge.common.capabilities.CapabilityDispatcher other)
+   {
+      return capProvider.areCapsCompatible(other);
+   }
+
+   @Override
+   public void invalidateCaps()
+   {
+      capProvider.invalidateCaps();
+   }
+
+   @Override
+   public void reviveCaps()
+   {
+      capProvider.reviveCaps();
+   }
+   // FORGE END
+
    class BoundTickingBlockEntity<T extends BlockEntity> implements TickingBlockEntity {
       private final T blockEntity;
       private final BlockEntityTicker<T> ticker;
@@ -637,7 +_,9 @@
             if (LevelChunk.this.isTicking(blockpos)) {
                try {
                   ProfilerFiller profilerfiller = LevelChunk.this.level.getProfiler();
+                  net.minecraftforge.server.timings.TimeTracker.BLOCK_ENTITY_UPDATE.trackStart(blockEntity);
                   profilerfiller.push(this::getType);
+                  this.blockEntity.tickTimer.startTiming(); // Spigot
                   BlockState blockstate = LevelChunk.this.getBlockState(blockpos);
                   if (this.blockEntity.getType().isValid(blockstate)) {
                      this.ticker.tick(LevelChunk.this.level, this.blockEntity.getBlockPos(), blockstate, this.blockEntity);
@@ -652,7 +_,17 @@
                   CrashReport crashreport = CrashReport.forThrowable(throwable, "Ticking block entity");
                   CrashReportCategory crashreportcategory = crashreport.addCategory("Block entity being ticked");
                   this.blockEntity.fillCrashReportCategory(crashreportcategory);
+
+                  if (net.minecraftforge.common.ForgeConfig.SERVER.removeErroringBlockEntities.get()) {
+                     LOGGER.error("{}", crashreport.getFriendlyReport());
+                     blockEntity.setRemoved();
+                     LevelChunk.this.removeBlockEntity(blockEntity.getBlockPos());
+                  } else
                   throw new ReportedException(crashreport);
+                  // Spigot start
+               } finally {
+                  this.blockEntity.tickTimer.stopTiming();
+                  // Spigot end
                }
             }
          }
@@ -680,6 +_,34 @@
       IMMEDIATE,
       QUEUED,
       CHECK;
+   }
+
+
+   /**
+    * <strong>FOR INTERNAL USE ONLY</strong>
+    * <p>
+    * Only public for use in {@link net.minecraft.world.level.chunk.storage.ChunkSerializer}.
+    */
+   @java.lang.Deprecated
+   @org.jetbrains.annotations.Nullable
+   public final CompoundTag writeCapsToNBT() {
+      return capProvider.serializeInternal();
+   }
+
+   /**
+    * <strong>FOR INTERNAL USE ONLY</strong>
+    * <p>
+    * Only public for use in {@link net.minecraft.world.level.chunk.storage.ChunkSerializer}.
+    *
+    */
+   @java.lang.Deprecated
+   public final void readCapsFromNBT(CompoundTag tag) {
+      capProvider.deserializeInternal(tag);
+   }
+
+   @Override
+   public Level getWorldForge() {
+      return getLevel();
    }
 
    @FunctionalInterface
