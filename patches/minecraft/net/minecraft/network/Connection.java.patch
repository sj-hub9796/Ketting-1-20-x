--- a/net/minecraft/network/Connection.java
+++ b/net/minecraft/network/Connection.java
@@ -62,18 +_,23 @@
    });
    public static final AttributeKey<ConnectionProtocol> ATTRIBUTE_PROTOCOL = AttributeKey.valueOf("protocol");
    public static final LazyLoadedValue<NioEventLoopGroup> NETWORK_WORKER_GROUP = new LazyLoadedValue<>(() -> {
-      return new NioEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Client IO #%d").setDaemon(true).build());
+      return new NioEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Client IO #%d").setDaemon(true).setUncaughtExceptionHandler(new net.minecraft.DefaultUncaughtExceptionHandlerWithName(LOGGER)).build()); //Ketting
    });
    public static final LazyLoadedValue<EpollEventLoopGroup> NETWORK_EPOLL_WORKER_GROUP = new LazyLoadedValue<>(() -> {
-      return new EpollEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Epoll Client IO #%d").setDaemon(true).build());
+      return new EpollEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Epoll Client IO #%d").setDaemon(true).setUncaughtExceptionHandler(new net.minecraft.DefaultUncaughtExceptionHandlerWithName(LOGGER)).build()); //Ketting
    });
    public static final LazyLoadedValue<DefaultEventLoopGroup> LOCAL_WORKER_GROUP = new LazyLoadedValue<>(() -> {
-      return new DefaultEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Local Client IO #%d").setDaemon(true).build());
+      return new DefaultEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Local Client IO #%d").setDaemon(true).setUncaughtExceptionHandler(new net.minecraft.DefaultUncaughtExceptionHandlerWithName(LOGGER)).build()); //Ketting
    });
    private final PacketFlow receiving;
    private final Queue<Connection.PacketHolder> queue = Queues.newConcurrentLinkedQueue();
    public Channel channel;
    public SocketAddress address;
+   // Spigot Start
+   public java.util.UUID spoofedUUID;
+   public com.mojang.authlib.properties.Property[] spoofedProfile;
+   public boolean preparing = true;
+   // Spigot End
    private PacketListener packetListener;
    private Component disconnectedReason;
    private boolean encrypted;
@@ -86,6 +_,8 @@
    private boolean handlingFault;
    @Nullable
    private volatile Component delayedDisconnect;
+   private java.util.function.Consumer<Connection> activationHandler;
+   public String hostname = ""; // CraftBukkit - add field
 
    public Connection(PacketFlow p_129482_) {
       this.receiving = p_129482_;
@@ -95,6 +_,11 @@
       super.channelActive(p_129525_);
       this.channel = p_129525_.channel();
       this.address = this.channel.remoteAddress();
+      if (activationHandler != null) activationHandler.accept(this);
+
+      // Spigot Start
+      this.preparing = false;
+      // Spigot End
 
       try {
          this.setProtocol(ConnectionProtocol.HANDSHAKING);
@@ -111,8 +_,10 @@
    public void setProtocol(ConnectionProtocol p_129499_) {
       this.channel.attr(ATTRIBUTE_PROTOCOL).set(p_129499_);
       this.channel.attr(BundlerInfo.BUNDLER_PROVIDER).set(p_129499_);
+      this.channel.eventLoop().execute(()-> {
       this.channel.config().setAutoRead(true);
       LOGGER.debug("Enabled auto read");
+      });
    }
 
    public void channelInactive(ChannelHandlerContext p_129527_) {
@@ -147,6 +_,10 @@
 
          }
       }
+      if (net.minecraft.server.MinecraftServer.getServer().isDebugging()) {
+         org.kettingpowered.ketting.common.deobf.StacktraceDeobfuscator.deobf(p_129534_); //Ketting
+         p_129534_.printStackTrace(); // Spigot
+      }
    }
 
    protected void channelRead0(ChannelHandlerContext p_129487_, Packet<?> p_129488_) {
@@ -285,6 +_,9 @@
    }
 
    public void disconnect(Component p_129508_) {
+      // Spigot Start
+      this.preparing = false;
+      // Spigot End
       if (this.channel == null) {
          this.delayedDisconnect = p_129508_;
       }
@@ -316,6 +_,8 @@
    }
 
    public static ChannelFuture connect(InetSocketAddress p_290034_, boolean p_290035_, final Connection p_290031_) {
+      net.minecraftforge.network.DualStackUtils.checkIPv6(p_290034_.getAddress());
+      p_290031_.activationHandler = net.minecraftforge.network.NetworkHooks::registerClientLoginChannel;
       Class<? extends SocketChannel> oclass;
       LazyLoadedValue<? extends EventLoopGroup> lazyloadedvalue;
       if (Epoll.isAvailable() && p_290035_) {
@@ -347,6 +_,7 @@
 
    public static Connection connectToLocalServer(SocketAddress p_129494_) {
       final Connection connection = new Connection(PacketFlow.CLIENTBOUND);
+      connection.activationHandler = net.minecraftforge.network.NetworkHooks::registerClientLoginChannel;
       (new Bootstrap()).group(LOCAL_WORKER_GROUP.get()).handler(new ChannelInitializer<Channel>() {
          protected void initChannel(Channel p_129557_) {
             ChannelPipeline channelpipeline = p_129557_.pipeline();
@@ -437,6 +_,14 @@
 
    public float getAverageSentPackets() {
       return this.averageSentPackets;
+   }
+
+   public Channel channel() {
+      return this.channel;
+   }
+
+   public PacketFlow getDirection() {
+      return this.receiving;
    }
 
    static class PacketHolder {
